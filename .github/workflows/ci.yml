name: Test and Release

on:
  push:
    branches:
      - 'release/v*'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/v')
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.1'
      - name: Install netcat
        run: sudo apt-get install -y netcat-openbsd
      - name: Wait for RabbitMQ
        run: |
          echo "Waiting for RabbitMQ to go up..."
          for i in {1..10}; do
            nc -z localhost 5672 && echo "RabbitMQ is ready!" && break
            echo "Waiting for RabbitMQ..."
            sleep 3
          done
      - name: Run Tests
        run: sh ./test.sh

  lint:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request')) }}
    name: Run Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - run: golangci-lint run ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/heads/release/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract Tag Name
        id: extract_tag
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/release/}"
          TAG_NAME=$(echo "$BRANCH_NAME" | sed 's/-/\./g')
          echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.extract_tag.outputs.tag }}
          git push origin ${{ steps.extract_tag.outputs.tag }}
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_tag.outputs.tag }}
          name: "Release ${{ steps.extract_tag.outputs.tag }}"
          body: "Release automatically created from branch ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}